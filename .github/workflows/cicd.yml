name: Java CI/CD with Gradle #워크플로우의 이름

on: #워크플로우가 트리거 될 조건을 정의 (아래는 "main" 브랜치로의 푸시 이벤트가 트리거 조건)
  push:
    branches: [ "main" ] #push할 경우 사용 할 branch 명 기입

jobs: #여러 작업(job)을 정의할 수 있는 곳
  deploy: # 작업의 이름
    runs-on: ubuntu-latest # 작업을 실행할 환경을 정의(여기서는 최신 Ubuntu 사용)

    #Checkout : Repository 의 코드들을 가져옵니다.
    steps:
      - name: Checkout
        uses: actions/checkout@v3 #저장소의 코드를 체크아웃하는 액션 사용

      #Setting JDK
      - name: Set up JDK 17 
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' # temurin 배포판의 JDK 17 사용

      #Setting yml
      - name: make application.yml
        run: | 
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}"  > src/main/resources/application.yml
          find src
      #gradlew chmod
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew # ./gradlew 파일에 실행 권한 부여

      # Spring Boot Build
      - name: Spring Boot Build
        run: ./gradlew clean build -x test # ./gradlew를 사용하여 Spring Boot 애플리케이션 빌드. 여기서 테스트는 제외 됨.(-x test)

      #------------------- Docker --------------------


      # Docker Image Build
      - name: Docker Image Build #Docker 이미지를 빌드, 시크릿 변수로 설정된 Docker Hub 사용자 이름과 이미지 이름을 사용하여 태그를 지정
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }} .

      # DockerHub Login
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with: # 설정한 시크릿 변수로 Docker Hub에 로그인
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Hub push
      - name: docker Hub push # 빌드된 Docker 이미지를 Docker Hub에 푸시
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}

      #------------------- EC2 --------------------

      # AWS EC2 Server Connect & Docker 명령어 실행
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6 # appleboy의 SSH 액션을 사용하여 EC2 서버에 연결
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: | 
            sudo docker stop ${{ secrets.DOCKERHUB_IMAGENAME }}
            sudo docker rm ${{ secrets.DOCKERHUB_IMAGENAME }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
            sudo docker run -it -d --network host --name ${{ secrets.DOCKERHUB_IMAGENAME }} -e TZ=Asia/Seoul ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_IMAGENAME }}
        #EC2 서버에서 Docker 컨테이너를 중지하고 삭제한 후, 새 이미지를 pull하고 다시 실행  
